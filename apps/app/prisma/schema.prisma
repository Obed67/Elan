// This is your Prisma schema file,
// elan more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  profilePictureId String?   @unique
  profilePicture   File?     @relation(fields: [profilePictureId], references: [id], onDelete: SetNull)
  image            String? // Require to use auth.js 
  accounts         Account[]

  // Custom fields
  username                   String?                     @unique
  role                       UserRole                    @default(USER)
  password                   String?
  hasPassword                Boolean                     @default(false)
  resetPasswordToken         ResetPassordToken?
  userEmailVerificationToken UserEmailVerificationToken?
  lastLocale                 String?
  otpSecret                  String                      @default("")
  otpMnemonic                String                      @default("")
  otpVerified                Boolean                     @default(false)
  uploadsInProgress          FileUploading[]

  // TaskFlow relations
  ownedProjects              Project[]                   @relation("ProjectOwner")
  projectMemberships         ProjectMember[]
  assignedTasks              Task[]                      @relation("TaskAssignee")
  createdTasks               Task[]                      @relation("TaskCreator")
  comments                   Comment[]
  notifications              Notification[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//? For one time login links
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model ResetPassordToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model UserEmailVerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model File {
  id        String   @id @default(cuid())
  key       String   @unique
  filetype  String
  bucket    String
  endpoint  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfilePicture User?

  fileUploadingId String?        @unique
  fileUploading   FileUploading? @relation(fields: [fileUploadingId], references: [id], onDelete: SetNull)
  
  // TaskFlow relations
  taskAttachments TaskAttachment[]
}

// Upload in progress
model FileUploading {
  id       String   @id @default(cuid())
  key      String   @unique
  filetype String
  bucket   String
  endpoint String
  expires  DateTime

  file File?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===== TASKFLOW MODELS =====

// Project management
model Project {
  
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  isPublic    Boolean  @default(false)
  
  // Relations
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  notifications Notification[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Project membership and roles
model ProjectMember {
  id        String        @id @default(cuid())
  role      ProjectRole   @default(MEMBER)
  
  // Relations
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@unique([projectId, userId])
}

// Task management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  
  // Relations
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId   String
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  attachments TaskAttachment[]
  notifications Notification[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Task comments
model Comment {
  id        String   @id @default(cuid())
  content   String
  isEdited  Boolean  @default(false)
  
  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Task attachments (extends File model)
model TaskAttachment {
  id        String   @id @default(cuid())
  
  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileId    String   @unique
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  
  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional relations for context
  projectId String?
  project   Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  createdAt DateTime         @default(now())
}

// ===== ENUMS =====

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMMENTED
  PROJECT_INVITED
  PROJECT_UPDATED
  TASK_DUE_SOON
  TASK_OVERDUE
}
